#!/bin/bash -e

APP_DIR="$1"
ENV_DIR="$3"

# load required environment variables
GIT_TOKEN=$(<"$ENV_DIR/GIT_TOKEN")
GIT_REPO_URL=$(<"$ENV_DIR/GIT_REPO_URL")

if [[ -z $GIT_TOKEN ]]; then
    echo "Did you forget to set GIT_TOKEN?"
    exit 1
fi

if [[ -z $GIT_REPO_URL ]]; then
    echo "Did you forget to set GIT_REPO_URL?"
    exit 1
fi

# replace SSH url with HTTPS url and include the token
GIT_REPO_URL=${GIT_REPO_URL/https:\/\//https:\/\/$GIT_TOKEN@}

# make sure we're in the root of the app dir
cd "$APP_DIR"

# create an empty repo to fetch into
git init -q

# enable sparse checkouts, this will avoid checking out
# all the files in the repo, we'll only check out .gitmodules
git config core.sparseCheckout true
echo ".gitmodules" > .git/info/sparse-checkout
rm -f .gitmodules

# add the repo as a remote and fetch the repo's history
git remote add origin "$GIT_REPO_URL"

# checkout the revision that's being deployed
echo "-----> Fetching shallow history"
git fetch -q --depth 1 origin -a > /dev/null
git checkout -q ${SOURCE_VERSION:-master} > /dev/null

# Undo sparse checkouts configuration
git config core.sparseCheckout false
rm .git/info/sparse-checkout

# replace SSH urls with HTTPS urls and include the token
echo "-----> Redirecting submodules to HTTPS"
sed -i -e "s/git@github.com:/https:\/\/$GIT_TOKEN@github.com\//" ./.gitmodules

# Fetch all the submodules
echo "-----> Checking out all submodules"
git submodule -q update --init --recursive
git submodule status | sed 's/^/       * /'
